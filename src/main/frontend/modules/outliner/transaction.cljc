(ns frontend.modules.outliner.transaction
  #?(:cljs (:require-macros [frontend.modules.outliner.transaction])))

(defmacro transact!
  "Batch all the transactions in `body` to a single transaction, Support nested transact! calls.
  Currently there are no options, it'll execute body and collect all transaction data generated by body, then calls `listeners` on the `tx-report`.
  (transact! {<option-map>}
    (insert-blocks! ...)
    ;; do something
    (move-blocks! ...)
    (delete-blocks! ...))"
  [opts & body]
  (assert (map? opts))
  `(if (some? frontend.modules.outliner.core/*transaction-data*)
     (do ~@body)
     (binding [frontend.modules.outliner.core/*transaction-data* (transient [])]
       ~@body
       (let [~'r (-> (persistent! frontend.modules.outliner.core/*transaction-data*)
                     (concat (:additional-tx ~opts)))
             ~'opts (dissoc ~opts :additional-tx)]
         (when (seq ~'r)
           (frontend.modules.outliner.datascript/transact! ~'r ~'opts))))))
